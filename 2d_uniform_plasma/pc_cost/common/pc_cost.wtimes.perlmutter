#!/bin/bash

clear

scrape_wtimes () {

arg=("$@")
# argument 1: JFNK solver type
# argument 2: PC solver type
# argument 3: ASM overlap
# argument 4: ILU factor levels
# argument 5: Number of V-cycles

solver_type=${arg[1]}
precon_type=${arg[2]}
asm_ovlp=${arg[3]}
ilu_level=${arg[4]}
num_vcycl=${arg[5]}

declare -a nnodevals=("1" "2" "4" "8" "16" "32" "48" "64")
declare -a nxnpvals=("512" "32")
count=${#nxnpvals[@]}

precon_str=$precon_type
if [[ "$precon_type" == *"asm"* ]]; then
    precon_str="${precon_str}_asmovlp$(printf "%03d" $asm_ovlp)"
fi
if [[ "$precon_type" == *"ilu"* ]]; then
    precon_str="${precon_str}_ilu$(printf "%03d" $ilu_level)"
fi
if [[ "$precon_type" == *"mg"* ]]; then
    precon_str="${precon_str}_nvcyc$(printf "%03d" $num_vcycl)"
fi

dir_prefix=".tmp.${solver_type}.pc_${precon_str}.${NERSC_HOST}."
wtimes_prefix="wtimes.${solver_type}.pc_${precon_str}.${NERSC_HOST}"
rootdir=$PWD
outfile=out.${NERSC_HOST}.log

for (( i = 0; i < count; i += 2 ))
do
    nx=${nxnpvals[i + 0]}
    np=${nxnpvals[i + 1]}
    wtime_file="${wtimes_prefix}.$(printf "nx%05d" $nx).$(printf "np%03d" $np).dat"
    echo ""
    echo "Extracting wall times for nx=$nx, np=$np..."
    if [ -f "$wtime_file" ]; then
        echo "  deleting old $wtime_file"
        rm $wtime_file
    fi
    touch $wtime_file
    echo "nx ngpu n_ts t_ts n_newton t_newton n_gmres t_gmres n_pc t_pc n_rhs t_rhs n_rhsnl t_rhsnl" >> $wtime_file
    for nnode in ${nnodevals[@]}; do
        ngpu=$(( nnode*4 ))
        dirname=$dir_prefix$(printf "%05d" $ngpu).$(printf "nx%05d" $nx)$(printf "np%03d" $np)
        echo "  Run directory is $dirname"

        ts="ThetaImplicitEM::OneStep()"
        tstime=$(cat $dirname/$outfile |grep -m2 "$ts" |tail -n1)
        ncall_ts=$(echo $tstime | awk '{print $2}')
        wtime_ts=$(echo $tstime | awk '{print $4}')
        if [ -z "$tstime" ]; then
            echo "  Warning: unable to find $ts for nx=$nx, np=$np, ngpu=$ngpu."
            ncall_ts="0"
            wtime_ts="0.0"
        fi

        if [[ "$solver_type" == "petsc_ksp" ]]; then

            newton="NewtonSolver::Solve()"
            newtontime=$(cat $dirname/$outfile |grep -m2 "$newton" |tail -n1)
            ncall_newton=$(echo $newtontime | awk '{print $2}')
            wtime_newton=$(echo $newtontime | awk '{print $4}')
            if [ -z "$newtontime" ]; then
                echo "  Warning: unable to find $newton for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_newton="0"
                wtime_newton="0.0"
            fi

            gmres="KSP_impl::solve()"
            gmrestime=$(cat $dirname/$outfile |grep -m2 "$gmres" |tail -n1)
            ncall_gmres=$(echo $gmrestime | awk '{print $2}')
            wtime_gmres=$(echo $gmrestime | awk '{print $4}')
            if [ -z "$gmrestime" ]; then
                echo "  Warning: unable to find $gmres for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_gmres="0"
                wtime_gmres="0.0"
            fi

            pc="PCApply"
            pctime=$(cat $dirname/$outfile |grep -m1 "$pc" |tail -n1)
            ncall_pc=$(echo $pctime | awk '{print $2}')
            wtime_pc=$(echo $pctime | awk '{print $4}')
            if [ -z "$pctime" ]; then
                echo "  Warning: unable to find $pc for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_pc="0"
                wtime_pc="0.0"
            fi

            rhs="PETScSolver_impl::applyOp()"
            rhstime=$(cat $dirname/$outfile |grep -m2 "$rhs" |tail -n1)
            ncall_rhs=$(echo $rhstime | awk '{print $2}')
            wtime_rhs=$(echo $rhstime | awk '{print $4}')
            if [ -z "$rhstime" ]; then
                echo "  Warning: unable to find $rhs for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_rhs="0"
                wtime_rhs="0.0"
            fi

            rhsnl="NewtonSolver::EvalResidual()"
            nlrhstime=$(cat $dirname/$outfile |grep -m2 "$rhsnl" |tail -n1)
            ncall_nlrhs=$(echo $nlrhstime | awk '{print $2}')
            wtime_nlrhs=$(echo $nlrhstime | awk '{print $4}')
            if [ -z "$nlrhstime" ]; then
                echo "  Warning: unable to find $nlrhs for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_nlrhs="0"
                wtime_nlrhs="0.0"
            fi

        elif [[ "$solver_type" == "petsc_snes" ]]; then

            newton="SNES_impl::solve()"
            newtontime=$(cat $dirname/$outfile |grep -m2 "$newton" |tail -n1)
            ncall_newton=$(echo $newtontime | awk '{print $2}')
            wtime_newton=$(echo $newtontime | awk '{print $4}')
            if [ -z "$newtontime" ]; then
                echo "  Warning: unable to find $newton for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_newton="0"
                wtime_newton="0.0"
            fi

            gmres="KSPSolve"
            gmrestime=$(cat $dirname/$outfile |grep -m1 "$gmres" |tail -n1)
            ncall_gmres=$(echo $gmrestime | awk '{print $2}')
            wtime_gmres=$(echo $gmrestime | awk '{print $4}')
            if [ -z "$gmrestime" ]; then
                echo "  Warning: unable to find $gmres for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_gmres="0"
                wtime_gmres="0.0"
            fi

            pc="PCApply"
            pctime=$(cat $dirname/$outfile |grep -m1 "$pc" |tail -n1)
            ncall_pc=$(echo $pctime | awk '{print $2}')
            wtime_pc=$(echo $pctime | awk '{print $4}')
            if [ -z "$pctime" ]; then
                echo "  Warning: unable to find $pc for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_pc="0"
                wtime_pc="0.0"
            fi

            rhs="PETScSolver_impl::applyOp()"
            rhstime=$(cat $dirname/$outfile |grep -m2 "$rhs" |tail -n1)
            ncall_rhs=$(echo $rhstime | awk '{print $2}')
            wtime_rhs=$(echo $rhstime | awk '{print $4}')
            if [ -z "$rhstime" ]; then
                echo "  Warning: unable to find $rhs for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_rhs="0"
                wtime_rhs="0.0"
            fi

            rhsnl="SNES_impl::computeRHS()"
            nlrhstime=$(cat $dirname/$outfile |grep -m2 "$rhsnl" |tail -n1)
            ncall_nlrhs=$(echo $nlrhstime | awk '{print $2}')
            wtime_nlrhs=$(echo $nlrhstime | awk '{print $4}')
            if [ -z "$nlrhstime" ]; then
                echo "  Warning: unable to find $nlrhs for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_nlrhs="0"
                wtime_nlrhs="0.0"
            fi

        else

            newton="NewtonSolver::Solve()"
            newtontime=$(cat $dirname/$outfile |grep -m2 "$newton" |tail -n1)
            ncall_newton=$(echo $newtontime | awk '{print $2}')
            wtime_newton=$(echo $newtontime | awk '{print $4}')
            if [ -z "$newtontime" ]; then
                echo "  Warning: unable to find $newton for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_newton="0"
                wtime_newton="0.0"
            fi

            gmres="GMRES::solve()"
            gmrestime=$(cat $dirname/$outfile |grep -m2 "$gmres" |tail -n1)
            ncall_gmres=$(echo $gmrestime | awk '{print $2}')
            wtime_gmres=$(echo $gmrestime | awk '{print $4}')
            if [ -z "$gmrestime" ]; then
                echo "  Warning: unable to find $gmres for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_gmres="0"
                wtime_gmres="0.0"
            fi

            pc="CurlCurlMLMGPC::Apply()"
            pctime=$(cat $dirname/$outfile |grep -m2 "$pc" |tail -n1)
            ncall_pc=$(echo $pctime | awk '{print $2}')
            wtime_pc=$(echo $pctime | awk '{print $4}')
            if [ -z "$pctime" ]; then
                echo "  Warning: unable to find $pc for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_pc="0"
                wtime_pc="0.0"
            fi

            rhs="JacobianFunctionMF::apply()"
            rhstime=$(cat $dirname/$outfile |grep -m2 "$rhs" |tail -n1)
            ncall_rhs=$(echo $rhstime | awk '{print $2}')
            wtime_rhs=$(echo $rhstime | awk '{print $4}')
            if [ -z "$rhstime" ]; then
                echo "  Warning: unable to find $rhs for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_rhs="0"
                wtime_rhs="0.0"
            fi

            rhsnl="NewtonSolver::EvalResidual()"
            nlrhstime=$(cat $dirname/$outfile |grep -m2 "$rhsnl" |tail -n1)
            ncall_nlrhs=$(echo $nlrhstime | awk '{print $2}')
            wtime_nlrhs=$(echo $nlrhstime | awk '{print $4}')
            if [ -z "$nlrhstime" ]; then
                echo "  Warning: unable to find $nlrhs for nx=$nx, np=$np, ngpu=$ngpu."
                ncall_nlrhs="0"
                wtime_nlrhs="0.0"
            fi
        fi

        echo "$nx $ngpu $ncall_ts $wtime_ts $ncall_newton $wtime_newton $ncall_gmres $wtime_gmres $ncall_pc $wtime_pc $ncall_rhs $wtime_rhs $ncall_nlrhs $wtime_nlrhs" >> $wtime_file
    done
    echo "Done!"

    echo ""
    echo "Wall times:"
    cat $wtime_file
    echo " "
done
}

declare -a pctypes=("ccmlmg" "petsc_asm_lu" "petsc_asm_ilu" "none")
num_pc=${#pctypes[@]}
#declare -a jfnktypes=("native_jfnk" "petsc_ksp" "petsc_snes")
declare -a jfnktypes=("native_jfnk" "petsc_ksp")
num_jfnk=${#jfnktypes[@]}

for jfnk_type in ${jfnktypes[@]}; do
    for pc_type in ${pctypes[@]}; do
        if [[ "$pc_type" == *"asm"* ]]; then
            declare -a asmovlps=("32" "16" "8")
        else
            declare -a asmovlps=("0")
        fi
        if [[ "$pc_type" == *"ilu"* ]]; then
            declare -a ilulvls=("8" "4" "2")
        else
            declare -a ilulvls=("0")
        fi
        if [[ "$pc_type" == *"mg"* ]]; then
            declare -a num_vcycles=("1" "2" "4")
        else
            declare -a num_vcycles=("0")
        fi
        if [[ "x$jfnk_type" == "xnative_jfnk" ]]; then
            if [[ "$pc_type" == *"petsc"* ]]; then
                continue
            fi
        fi

        for ilulvl in ${ilulvls[@]}; do
            for asmovlp in ${asmovlps[@]}; do
                for nvcycl in ${num_vcycles[@]}; do
                    echo "Scraping wall times for $jfnk_type, $pc_type (asm overlap=$asmovlp, ILU levels=$ilulvl, num. V-cycles=$nvcycl)..."
                    scrape_wtimes $# $jfnk_type $pc_type $asmovlp $ilulvl $nvcycl
                done
            done
        done
    done
done

