#!/bin/bash

clear

#declare -a nxvals=("16" "32" "64" "128" "256")
#declare -a npvals=("8" "16" "32")
#max_step=10
#NGPU=1
declare -a nxvals=("32" "64" "128" "256" "512")
declare -a npvals=("8" "16" "32" "64" "128")
max_step=10
NGPU=4

dir_prefix=".tmp.$1.wtime_vs_nxnp.${SYS_TYPE}."
rootdir=$PWD
INP_FILE=$rootdir/inputs/$1
outfile=out.${SYS_TYPE}.log
DIM=2d
EXEC=$(ls $WARPX_BUILD/build/bin/warpx.${DIM})
echo "Executable file is ${EXEC}."

for nx in ${nxvals[@]}; do
    for np in ${npvals[@]}; do
        echo "Creating directory for nx=$nx, np=$np"
        dirname=$dir_prefix$(printf "nx%05d" $nx)$(printf "np%03d" $np)
        if [ -d "$dirname" ]; then
            echo "  deleteing existing directory $dirname"
            rm -rf $dirname
        fi
        echo "  creating directory $dirname"
        mkdir $dirname

        cd $dirname
        echo "  creating shortcut for input file"
        cp $INP_FILE .
        INP=$(ls *.in)
        echo "  running WarpX with input file $INP"
        lrun -T $NGPU $EXEC $INP \
                            amr.n_cell = $nx $nx \
                            my_constants.nppcz = $np \
                            amr.max_grid_size = $(( nx/2 )) \
                            max_step = $max_step \
                            2>&1 > $outfile
        cd $rootdir
    done
done

ts="ThetaImplicitEM::OneStep()"
newton="NewtonSolver::Solve()"
gmres="GMRES::solve()"
pc="CurlCurlMLMGPC::Apply()"
rhs="JacobianFunctionMF::apply()"
rhsnl="NewtonSolver::EvalResidual()"

for np in ${npvals[@]}; do
    wtime_file="wtimes_nx_$(printf "np%03d" $np).$(printf "nproc%03d" $NGPU).${SYS_TYPE}.dat"
    echo ""
    if [ -f "$wtime_file" ]; then
        echo "  deleting old $wtime_file"
        rm $wtime_file
    fi
    touch $wtime_file
    echo "nx n_ts t_ts n_newton t_newton n_gmres t_gmres n_pc t_pc n_rhs t_rhs n_rhsnl t_rhsnl" >> $wtime_file
    for nx in ${nxvals[@]}; do
        dirname=$dir_prefix$(printf "nx%05d" $nx)$(printf "np%03d" $np)

        tstime=$(cat $dirname/$outfile |grep -m2 "$ts" |tail -n1)
        ncall_ts=$(echo $tstime | awk '{print $2}')
        wtime_ts=$(echo $tstime | awk '{print $4}')
        if [ -z "$tstime" ]; then
            echo "  Warning: unable to find $ts for nx=$nx, np=$np, ngpu=$ngpu."
            ncall_ts="0"
            wtime_ts="0.0"
        fi

        newtontime=$(cat $dirname/$outfile |grep -m2 "$newton" |tail -n1)
        ncall_newton=$(echo $newtontime | awk '{print $2}')
        wtime_newton=$(echo $newtontime | awk '{print $4}')
        if [ -z "$newtontime" ]; then
            echo "  Warning: unable to find $newton for nx=$nx, np=$np, ngpu=$ngpu."
            ncall_newton="0"
            wtime_newton="0.0"
        fi

        gmrestime=$(cat $dirname/$outfile |grep -m2 "$gmres" |tail -n1)
        ncall_gmres=$(echo $gmrestime | awk '{print $2}')
        wtime_gmres=$(echo $gmrestime | awk '{print $4}')
        if [ -z "$gmrestime" ]; then
            echo "  Warning: unable to find $gmres for nx=$nx, np=$np, ngpu=$ngpu."
            ncall_gmres="0"
            wtime_gmres="0.0"
        fi

        pctime=$(cat $dirname/$outfile |grep -m2 "$pc" |tail -n1)
        ncall_pc=$(echo $pctime | awk '{print $2}')
        wtime_pc=$(echo $pctime | awk '{print $4}')
        if [ -z "$pctime" ]; then
            echo "  Warning: unable to find $pc for nx=$nx, np=$np, ngpu=$ngpu."
            ncall_pc="0"
            wtime_pc="0.0"
        fi

        rhstime=$(cat $dirname/$outfile |grep -m2 "$rhs" |tail -n1)
        ncall_rhs=$(echo $rhstime | awk '{print $2}')
        wtime_rhs=$(echo $rhstime | awk '{print $4}')
        if [ -z "$rhstime" ]; then
            echo "  Warning: unable to find $rhs for nx=$nx, np=$np, ngpu=$ngpu."
            ncall_rhs="0"
            wtime_rhs="0.0"
        fi

        nlrhstime=$(cat $dirname/$outfile |grep -m2 "$rhsnl" |tail -n1)
        ncall_nlrhs=$(echo $nlrhstime | awk '{print $2}')
        wtime_nlrhs=$(echo $nlrhstime | awk '{print $4}')
        if [ -z "$nlrhstime" ]; then
            echo "  Warning: unable to find $nlrhs for nx=$nx, np=$np, ngpu=$ngpu."
            ncall_nlrhs="0"
            wtime_nlrhs="0.0"
        fi

        echo "$nx $ncall_ts $wtime_ts $ncall_newton $wtime_newton $ncall_gmres $wtime_gmres $ncall_pc $wtime_pc $ncall_rhs $wtime_rhs $ncall_nlrhs $wtime_nlrhs" >> $wtime_file
    done
    echo "Done!"

    echo ""
    echo "Wall times:"
    cat $wtime_file
done
